/* 
  To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html.
  Provides a comprehensive guide on how to configure TypeScript compilation options.
*/
/* 
  To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options.
  This documentation explains Angular-specific compiler options and how to optimize the build and development process.
*/

{
    // Disable the automatic compilation on save (compilation happens only when explicitly triggered)
    "compileOnSave": false,
  
    "compilerOptions": {
      // Directory where compiled JavaScript files will be saved
      "outDir": "./dist/out-tsc",
  
      // Enable strict type-checking options for better type safety
      "strict": true,  // Enable all strict type-checking options
      "noImplicitOverride": true,  // Ensures that overriding methods must be explicitly marked with `override`
      "noPropertyAccessFromIndexSignature": true,  // Disallows accessing properties via an index signature (e.g., `obj['key']`)
      "noImplicitReturns": true,  // Requires functions to have a return type or an explicit return statement
      "noFallthroughCasesInSwitch": true,  // Prevents fall-through behavior in `switch` statements (requires `break` or `return` in each case)
      "skipLibCheck": true,  // Skips type-checking of declaration files (improves compilation speed)
      "isolatedModules": true,  // Ensures that each file can be safely transpiled independently (useful for Babel and other bundlers)
      "esModuleInterop": true,  // Enables compatibility with CommonJS modules in a way that allows default imports
      "sourceMap": true,  // Generates source maps for debugging purposes
      "declaration": false,  // Does not generate type declaration files (.d.ts)
      "experimentalDecorators": true,  // Enables support for experimental decorators (required for Angular)
      "moduleResolution": "bundler",  // Uses bundler module resolution strategy (ideal for bundlers like Webpack)
      "importHelpers": true,  // Reduces the size of the generated code by importing helper functions instead of inlining them
      "target": "ES2022",  // Specifies the ECMAScript version to compile to (ES2022 features will be used)
      "module": "ES2022",  // Specifies the module system to use (ES2022 module syntax)
      "lib": [
        "ES2022",  // Includes ES2022 standard library features
        "dom"  // Includes DOM library to enable web-related APIs (e.g., document, window)
      ]
    },
  
    "angularCompilerOptions": {
      // Disables legacy message IDs for internationalization (i18n) in Angular
      "enableI18nLegacyMessageIdFormat": false,
  
      // Enforces strict checks for dependency injection parameters in Angular services/components
      "strictInjectionParameters": true,  // Ensures strict typing for injected parameters in Angular components/services
  
      // Enforces stricter input access modifiers (e.g., using `@Input()` in Angular components)
      "strictInputAccessModifiers": true,  // Ensures strict access modifiers for inputs in Angular components
  
      // Enforces strict template type-checking in Angular
      "strictTemplates": true  // Enables template type-checking to ensure type safety in Angular templates
    }
  }
  